---
description: 
globs: 
alwaysApply: true
---
# Backend Cursor Rules - Scholarship System

## Technology Stack
- **Framework**: FastAPI
- **ORM**: SQLAlchemy 2.0
- **Database**: PostgreSQL 15, asyncpg
- **Testing**: pytest, pytest-asyncio
- **Validation**: Pydantic v2
- **Migration**: Alembic
- **Cache**: Redis
- **Authentication**: JWT

## Directory Structure (backend/)
- `app/main.py` - ASGI application entry point
- `app/api/v1/endpoints/` - API route layering
- `app/core/` - Core configuration, JWT, caching
- `app/db/` - Database connection and Session management
- `app/models/` - SQLAlchemy ORM models
- `app/schemas/` - Pydantic validation models
- `app/services/` - Business logic layer (OCR, email, etc.)
- `app/tests/` - pytest test files
- `alembic/` - Database migration scripts

## Naming Conventions

### Files and Directories
- File names: **snake_case** (e.g., `student_service.py`, `application_model.py`)
- Directory names: **lowercase** (e.g., `endpoints`, `models`, `services`)

### Code
- Variables and functions: `camelCase` (e.g., `getUserById`, `studentData`)
- Class names: `PascalCase` (e.g., `StudentModel`, `ApplicationService`)
- Constants: `UPPER_SNAKE_CASE` (e.g., `MAX_FILE_SIZE`, `JWT_SECRET_KEY`)
- API endpoints: `/camelCase` (e.g., `/getApplications`, `/updateStudentInfo`)
- Database table names: `snake_case` (e.g., `student_applications`)
- Database fields: `snake_case` (e.g., `created_at`, `student_id`)

## FastAPI Standards

### Route Definition
```python
from fastapi import APIRouter, Depends, HTTPException, status
from app.schemas.application import ApplicationSchema, ApplicationResponse
from app.services.application_service import ApplicationService
from app.core.auth import getCurrentUser

router = APIRouter(prefix="/api/v1", tags=["applications"])

@router.post("/submitApplication", response_model=ApplicationResponse)
async def submit_application(
    applicationData: ApplicationSchema,
    currentUser: User = Depends(getCurrentUser)
) -> ApplicationResponse:
    """
    Submit scholarship application
    
    Args:
        applicationData: The application data to submit
        currentUser: The authenticated user
        
    Returns:
        ApplicationResponse: The created application response
        
    Raises:
        HTTPException: If validation fails or user not authorized
    """
    try:
        applicationService = ApplicationService()
        result = await applicationService.submitApplication(
            applicationData, currentUser.id
        )
        return ApplicationResponse(
            code=200,
            message="Application submitted successfully",
            data=result
        )
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
```

### API Response Format
```python
from pydantic import BaseModel
from typing import Optional, Generic, TypeVar

T = TypeVar('T')

class ApiResponse(BaseModel, Generic[T]):
    code: int
    message: str
    data: Optional[T] = None
    traceId: Optional[str] = None
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
```

## Database Standards

### SQLAlchemy Models
```python
from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime

Base = declarative_base()

class StudentApplication(Base):
    __tablename__ = "student_applications"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(String, ForeignKey("users.id"), nullable=False)
    scholarship_type = Column(String, nullable=False)
    gpa = Column(Float, nullable=False)
    application_data = Column(Text, nullable=True)  # JSON data
    status = Column(String, default="pending")
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    student = relationship("User", back_populates="applications")
    documents = relationship("ApplicationDocument", back_populates="application")
    
    def __repr__(self):
        return f"<StudentApplication(id={self.id}, student_id={self.student_id})>"
```

### Database Session Management
```python
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

# Create async engine
engine = create_async_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_recycle=300
)

# Create async session factory
AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

async def getDbSession() -> AsyncSession:
    """Dependency to get database session"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
```

### Repository Pattern
```python
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from typing import Optional, List
from app.models.student_application import StudentApplication

class ApplicationRepository:
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def createApplication(self, applicationData: dict) -> StudentApplication:
        """Create new application"""
        application = StudentApplication(**applicationData)
        self.session.add(application)
        await self.session.commit()
        await self.session.refresh(application)
        return application
    
    async def getApplicationById(self, applicationId: int) -> Optional[StudentApplication]:
        """Get application by ID"""
        result = await self.session.execute(
            select(StudentApplication).where(StudentApplication.id == applicationId)
        )
        return result.scalar_one_or_none()
    
    async def getApplicationsByUserId(self, userId: str) -> List[StudentApplication]:
        """Get all applications for a user"""
        result = await self.session.execute(
            select(StudentApplication)
            .where(StudentApplication.student_id == userId)
            .order_by(StudentApplication.created_at.desc())
        )
        return result.scalars().all()
    
    async def updateApplicationStatus(self, applicationId: int, status: str) -> bool:
        """Update application status"""
        result = await self.session.execute(
            update(StudentApplication)
            .where(StudentApplication.id == applicationId)
            .values(status=status, updated_at=datetime.utcnow())
        )
        await self.session.commit()
        return result.rowcount > 0
```

## Pydantic Schemas

### Request/Response Models
```python
from pydantic import BaseModel, Field, validator
from typing import Optional, List
from datetime import datetime
from enum import Enum

class ScholarshipType(str, Enum):
    ACADEMIC = "academic"
    NEED_BASED = "need_based"
    MERIT = "merit"
    ATHLETIC = "athletic"

class ApplicationSchema(BaseModel):
    studentId: str = Field(..., description="Student ID")
    scholarshipType: ScholarshipType = Field(..., description="Type of scholarship")
    gpa: float = Field(..., ge=0.0, le=4.0, description="GPA (0.0-4.0)")
    personalStatement: str = Field(..., min_length=100, max_length=5000)
    expectedGraduationDate: datetime = Field(...)
    
    @validator('gpa')
    def validateGpa(cls, v, values):
        if 'scholarshipType' in values:
            scholarshipType = values['scholarshipType']
            if scholarshipType == ScholarshipType.ACADEMIC and v < 3.5:
                raise ValueError('Academic scholarship requires GPA >= 3.5')
        return v
    
    class Config:
        use_enum_values = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }

class ApplicationResponse(BaseModel):
    id: int
    studentId: str
    scholarshipType: str
    status: str
    submittedAt: datetime
    lastUpdated: datetime
    
    class Config:
        from_attributes = True
```

## Service Layer

### Business Logic
```python
from app.repositories.application_repository import ApplicationRepository
from app.services.email_service import EmailService
from app.services.gpa_validation_service import GpaValidationService
from app.core.exceptions import ValidationError, NotFoundError

class ApplicationService:
    def __init__(self):
        self.emailService = EmailService()
        self.gpaValidationService = GpaValidationService()
    
    async def submitApplication(
        self, 
        applicationData: ApplicationSchema, 
        userId: str,
        session: AsyncSession
    ) -> ApplicationResponse:
        """Submit scholarship application with validation"""
        
        # Validate GPA requirements
        if not await self.gpaValidationService.validateGpaRequirement(
            applicationData.gpa, 
            applicationData.scholarshipType
        ):
            raise ValidationError("GPA does not meet scholarship requirements")
        
        # Check for duplicate applications
        repository = ApplicationRepository(session)
        existingApplication = await repository.getActiveApplicationByUser(
            userId, applicationData.scholarshipType
        )
        
        if existingApplication:
            raise ValidationError("Active application already exists for this scholarship")
        
        # Create application
        applicationDict = applicationData.dict()
        applicationDict['student_id'] = userId
        applicationDict['status'] = 'pending'
        
        application = await repository.createApplication(applicationDict)
        
        # Send confirmation email
        await self.emailService.sendApplicationConfirmation(
            userId, application.id
        )
        
        return ApplicationResponse.from_orm(application)
    
    async def getApplicationsByUser(
        self, 
        userId: str,
        session: AsyncSession
    ) -> List[ApplicationResponse]:
        """Get all applications for a user"""
        repository = ApplicationRepository(session)
        applications = await repository.getApplicationsByUserId(userId)
        
        return [ApplicationResponse.from_orm(app) for app in applications]
    
    async def updateApplicationStatus(
        self,
        applicationId: int,
        newStatus: str,
        adminUserId: str,
        session: AsyncSession
    ) -> bool:
        """Update application status (admin only)"""
        repository = ApplicationRepository(session)
        
        # Verify application exists
        application = await repository.getApplicationById(applicationId)
        if not application:
            raise NotFoundError("Application not found")
        
        # Update status
        success = await repository.updateApplicationStatus(applicationId, newStatus)
        
        if success:
            # Send status update email
            await self.emailService.sendStatusUpdateNotification(
                application.student_id, applicationId, newStatus
            )
        
        return success
```

## Authentication and Authorization

### JWT Authentication
```python
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError, jwt
from app.core.config import settings
from app.models.user import User

security = HTTPBearer()

async def getCurrentUser(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    session: AsyncSession = Depends(getDbSession)
) -> User:
    """Get current authenticated user"""
    credentialsException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(
            credentials.credentials, 
            settings.JWT_SECRET_KEY, 
            algorithms=[settings.JWT_ALGORITHM]
        )
        userId: str = payload.get("sub")
        if userId is None:
            raise credentialsException
    except JWTError:
        raise credentialsException
    
    userRepository = UserRepository(session)
    user = await userRepository.getUserById(userId)
    if user is None:
        raise credentialsException
    
    return user

def requireRole(requiredRole: str):
    """Decorator to require specific role"""
    def roleChecker(currentUser: User = Depends(getCurrentUser)):
        if currentUser.role != requiredRole:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Insufficient permissions"
            )
        return currentUser
    return roleChecker

# Usage
@router.get("/adminApplications")
async def get_admin_applications(
    adminUser: User = Depends(requireRole("admin"))
):
    pass
```

## Testing Standards

### Unit Tests
```python
import pytest
from unittest.mock import AsyncMock, MagicMock
from app.services.application_service import ApplicationService
from app.schemas.application import ApplicationSchema, ScholarshipType

class TestApplicationService:
    
    @pytest.fixture
    def applicationService(self):
        return ApplicationService()
    
    @pytest.fixture
    def sampleApplicationData(self):
        return ApplicationSchema(
            studentId="S123456",
            scholarshipType=ScholarshipType.ACADEMIC,
            gpa=3.8,
            personalStatement="This is my personal statement" * 10,
            expectedGraduationDate="2025-06-15T00:00:00"
        )
    
    @pytest.mark.asyncio
    async def test_submit_application_success(
        self, 
        applicationService, 
        sampleApplicationData
    ):
        """Test successful application submission"""
        mockSession = AsyncMock()
        mockRepository = AsyncMock()
        
        # Mock successful submission
        mockRepository.createApplication.return_value = MagicMock(id=1)
        
        result = await applicationService.submitApplication(
            sampleApplicationData, 
            "user123", 
            mockSession
        )
        
        assert result is not None
        assert result.studentId == "S123456"
    
    @pytest.mark.asyncio
    async def test_validate_gpa_requirement_invalid(
        self, 
        applicationService
    ):
        """Test GPA requirement validation failure"""
        invalidData = ApplicationSchema(
            studentId="S123456",
            scholarshipType=ScholarshipType.ACADEMIC,
            gpa=2.5,  # Below academic requirement
            personalStatement="This is my personal statement" * 10,
            expectedGraduationDate="2025-06-15T00:00:00"
        )
        
        mockSession = AsyncMock()
        
        with pytest.raises(ValidationError):
            await applicationService.submitApplication(
                invalidData, 
                "user123", 
                mockSession
            )
```

### Integration Tests
```python
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.asyncio
async def test_submit_application_endpoint():
    """Test application submission endpoint"""
    async with AsyncClient(app=app, base_url="http://test") as client:
        applicationData = {
            "studentId": "S123456",
            "scholarshipType": "academic",
            "gpa": 3.8,
            "personalStatement": "This is my personal statement" * 10,
            "expectedGraduationDate": "2025-06-15T00:00:00"
        }
        
        response = await client.post(
            "/api/v1/submitApplication",
            json=applicationData,
            headers={"Authorization": "Bearer valid_token"}
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["code"] == 200
        assert data["message"] == "Application submitted successfully"
```

## Error Handling

### Custom Exceptions
```python
class ScholarshipSystemException(Exception):
    """Base exception for scholarship system"""
    def __init__(self, code: int, message: str):
        self.code = code
        self.message = message
        super().__init__(message)

class ValidationError(ScholarshipSystemException):
    """Validation error"""
    def __init__(self, message: str):
        super().__init__(400, message)

class NotFoundError(ScholarshipSystemException):
    """Resource not found error"""
    def __init__(self, message: str):
        super().__init__(404, message)

class UnauthorizedError(ScholarshipSystemException):
    """Unauthorized access error"""
    def __init__(self, message: str):
        super().__init__(401, message)
```

### Global Exception Handler
```python
from fastapi import Request
from fastapi.responses import JSONResponse

@app.exception_handler(ScholarshipSystemException)
async def scholarshipSystemExceptionHandler(
    request: Request, 
    exc: ScholarshipSystemException
):
    return JSONResponse(
        status_code=exc.code,
        content={
            "code": exc.code,
            "message": exc.message,
            "traceId": request.headers.get("X-Trace-ID")
        }
    )
```

## Configuration Management

### Settings
```python
from pydantic import BaseSettings
from typing import Optional

class Settings(BaseSettings):
    # Database
    DATABASE_URL: str
    DATABASE_MAX_CONNECTIONS: int = 20
    
    # JWT
    JWT_SECRET_KEY: str
    JWT_ALGORITHM: str = "HS256"
    JWT_EXPIRATION_HOURS: int = 24
    
    # Redis
    REDIS_URL: str
    REDIS_TTL: int = 600  # 10 minutes
    
    # File Upload
    MAX_FILE_SIZE: int = 10 * 1024 * 1024  # 10MB
    ALLOWED_FILE_TYPES: list = [".pdf", ".doc", ".docx", ".jpg", ".png"]
    
    # Email
    EMAIL_HOST: str
    EMAIL_PORT: int = 587
    EMAIL_USERNAME: str
    EMAIL_PASSWORD: str
    
    # Application
    DEBUG: bool = False
    API_V1_PREFIX: str = "/api/v1"
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()
```

## Performance Optimization

### Async Operations
```python
import asyncio
from concurrent.futures import ThreadPoolExecutor

class OCRService:
    def __init__(self):
        self.executor = ThreadPoolExecutor(max_workers=4)
    
    async def processDocument(self, filePath: str) -> dict:
        """Process document with OCR in thread pool"""
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(
            self.executor,
            self._syncOcrProcess,
            filePath
        )
        return result
    
    def _syncOcrProcess(self, filePath: str) -> dict:
        """Synchronous OCR processing"""
        # OCR implementation
        pass
```

### Caching with Redis
```python
import redis.asyncio as redis
import json
from typing import Optional

class CacheService:
    def __init__(self):
        self.redis = redis.from_url(settings.REDIS_URL)
    
    async def get(self, key: str) -> Optional[dict]:
        """Get cached data"""
        data = await self.redis.get(key)
        if data:
            return json.loads(data)
        return None
    
    async def set(self, key: str, value: dict, ttl: int = settings.REDIS_TTL):
        """Set cached data"""
        await self.redis.setex(key, ttl, json.dumps(value))
    
    async def delete(self, key: str):
        """Delete cached data"""
        await self.redis.delete(key)
```

## Documentation

### API Documentation
```python
from fastapi import FastAPI

app = FastAPI(
    title="Scholarship Management System API",
    description="API for managing scholarship applications and approvals",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Add detailed docstrings for all endpoints
@router.post(
    "/submitApplication",
    response_model=ApplicationResponse,
    summary="Submit scholarship application",
    description="Submit a new scholarship application with validation",
    responses={
        200: {"description": "Application submitted successfully"},
        400: {"description": "Validation error"},
        401: {"description": "Unauthorized"},
        409: {"description": "Duplicate application"}
    }
)
```

## Best Practices

### Code Quality
- Use type hints for all functions and methods
- Follow PEP 8 style guidelines
- Use async/await for I/O operations
- Implement proper logging
- Use dependency injection pattern
- Write comprehensive tests (90% coverage target)

### Security
- Validate all input data with Pydantic
- Use parameterized queries to prevent SQL injection
- Implement proper authentication and authorization
- Use HTTPS in production
- Sanitize file uploads
- Implement rate limiting

### Performance
- Use connection pooling for database
- Implement caching for frequently accessed data
- Use background tasks for heavy operations
- Optimize database queries
- Monitor API response times (target: p95 < 600ms) 