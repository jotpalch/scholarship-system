---
description: 
globs: 
alwaysApply: true
---
# Docker Deployment Standards

**CRITICAL**: Always use Docker for testing - DO NOT modify local environment or Python installation.

## Docker Testing Environment

### Required Service Stack
- **PostgreSQL 15**: Database in container
- **Redis**: Cache and session storage
- **MinIO**: Object storage for files
- **FastAPI Backend**: Python application
- **Next.js Frontend**: React application
- **NGINX**: Reverse proxy (optional for production testing)

### Port Configuration
```bash
# Required ports - ensure availability before testing
3000  # Frontend (Next.js)
8000  # Backend API (FastAPI)
5432  # PostgreSQL database
6379  # Redis cache
9000  # MinIO API
9001  # MinIO Console
```

### Testing Commands
```bash
# Start entire system
./test-docker.sh start

# Check service status
./test-docker.sh status

# View service logs
./test-docker.sh logs [service_name]

# Stop all services
./test-docker.sh stop

# Complete cleanup (remove volumes, networks)
./test-docker.sh cleanup
```

## Docker Compose Configuration

### Development Environment (docker-compose.yml)
```yaml
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: scholarship_db
      POSTGRES_USER: scholarship_user
      POSTGRES_PASSWORD: scholarship_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scholarship_user -d scholarship_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://scholarship_user:scholarship_pass@postgres:5432/scholarship_db
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
  minio_data:
```

## Dockerfile Best Practices

### Backend Dockerfile (FastAPI)
```dockerfile
# Multi-stage build for Python application
FROM python:3.11-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder
COPY --from=builder /root/.local /root/.local

# Create non-root user
RUN useradd --create-home --shell /bin/bash app
USER app
WORKDIR /app

# Copy application code
COPY --chown=app:app . .

# Make sure scripts are executable
USER root
RUN chmod +x /app/docker-entrypoint.sh
USER app

# Set PATH for pip installed packages
ENV PATH=/root/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### Frontend Dockerfile (Next.js)
```dockerfile
# Multi-stage build for Node.js application
FROM node:18-alpine as builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build application
RUN pnpm run build

# Production stage
FROM node:18-alpine as runner

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions
RUN chown -R nextjs:nodejs /app
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

EXPOSE 3000
CMD ["node", "server.js"]
```

## Development Workflow

### Local Development Setup
```bash
# Initial setup
./test-docker.sh setup

# Start development environment
./test-docker.sh dev

# Run database migrations
./test-docker.sh migrate

# Seed test data
./test-docker.sh seed

# Run tests in containers
./test-docker.sh test
```

### Service Dependencies
```yaml
# Proper service dependency configuration
services:
  backend:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
```

## Environment Configuration

### Environment Variables Management
```bash
# .env.example (template for local development)
# Database
DATABASE_URL=postgresql+asyncpg://scholarship_user:scholarship_pass@localhost:5432/scholarship_db

# Redis
REDIS_URL=redis://localhost:6379/0

# MinIO
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin123
MINIO_BUCKET=scholarship-files

# Security
SECRET_KEY=your-development-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Frontend
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_ENV=development
```

### Production Environment Variables
```bash
# Production-specific configurations
# Use proper secrets management in production
DATABASE_URL=${DATABASE_URL}
REDIS_URL=${REDIS_URL}
SECRET_KEY=${SECRET_KEY}
SMTP_PASSWORD=${SMTP_PASSWORD}
MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
```

## Production Deployment

### Docker Compose Production
```yaml
# docker-compose.prod.yml
version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL}
    restart: unless-stopped
```

### Security Considerations
```dockerfile
# Security best practices in Dockerfile

# Don't run as root
RUN useradd --create-home --shell /bin/bash app
USER app

# Remove unnecessary packages
RUN apt-get autoremove -y && apt-get clean

# Use specific image tags
FROM python:3.11.6-slim

# Copy only necessary files
COPY requirements.txt .
COPY --chown=app:app ./app ./app

# Set proper file permissions
RUN chmod 755 /app && chmod -R 644 /app/*
```

## Monitoring and Logging

### Health Checks
```yaml
# Comprehensive health checks
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  interval: 30s
  timeout: 10s
  start_period: 40s
  retries: 3
```

### Logging Configuration
```yaml
# Centralized logging
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
```

## Troubleshooting

### Common Issues
```bash
# Port conflicts
lsof -i :3000 :8000 :5432 :6379 :9000 :9001

# Container health issues
docker ps --filter "health=unhealthy"

# Network connectivity
docker network ls
docker network inspect scholarship-system_default

# Volume issues
docker volume ls
docker volume inspect scholarship-system_postgres_data
```

### Debug Commands
```bash
# Access container shell
docker exec -it scholarship-backend /bin/bash

# View container logs
docker logs -f scholarship-backend

# Check resource usage
docker stats

# Inspect container configuration
docker inspect scholarship-backend
```

@test-docker.sh
@docker-compose.yml
@docker-compose.test.yml
