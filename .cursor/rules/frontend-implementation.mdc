---
description: 
globs: 
alwaysApply: true
---
# Frontend Implementation Standards

Follow these patterns for consistent React component development and Next.js application structure.

## Next.js 15 App Router Structure

### Page Components (app/)
```typescript
// app/student/dashboard/page.tsx
export default function StudentDashboard() {
  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Student Dashboard</h1>
      {/* Page content */}
    </div>
  );
}
```

### Layout Components
```typescript
// app/student/layout.tsx
interface StudentLayoutProps {
  children: React.ReactNode;
}

export default function StudentLayout({ children }: StudentLayoutProps) {
  return (
    <div className="min-h-screen bg-gray-50">
      <StudentNavigation />
      <main>{children}</main>
    </div>
  );
}
```

## Component Development Patterns

### Component Structure Template
```typescript
interface ComponentNameProps {
  // Required props first
  id: string;
  title: string;
  // Optional props with defaults
  isLoading?: boolean;
  onSubmit?: (data: FormData) => void;
}

export function ComponentName({
  id,
  title,
  isLoading = false,
  onSubmit
}: ComponentNameProps) {
  // State hooks first
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<FormData | null>(null);
  
  // Custom hooks
  const { user } = useAuth();
  const { applications } = useApplications();
  
  // Event handlers
  const handleSubmit = async (data: FormData) => {
    setIsSubmitting(true);
    try {
      await onSubmit?.(data);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Early returns for loading/error states
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  return (
    <div className="component-container">
      {/* Component JSX */}
    </div>
  );
}
```

## Form Handling with React Hook Form + Zod

### Form Component Pattern
```typescript
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

const applicationSchema = z.object({
  scholarshipId: z.string().min(1, "Scholarship is required"),
  personalStatement: z.string().min(100, "Minimum 100 characters required"),
  gpa: z.number().min(0).max(4.0, "GPA must be between 0.0 and 4.0"),
});

type ApplicationFormData = z.infer<typeof applicationSchema>;

export function ApplicationForm({ onSubmit }: ApplicationFormProps) {
  const form = useForm<ApplicationFormData>({
    resolver: zodResolver(applicationSchema),
    defaultValues: {
      scholarshipId: "",
      personalStatement: "",
      gpa: 0,
    },
  });

  const handleFormSubmit = async (data: ApplicationFormData) => {
    try {
      await onSubmit(data);
      form.reset();
    } catch (error) {
      console.error("Submission failed:", error);
    }
  };

  return (
    <form onSubmit={form.handleSubmit(handleFormSubmit)}>
      {/* Form fields using shadcn/ui components */}
    </form>
  );
}
```

## State Management Patterns

### Context for Application State
```typescript
interface ApplicationContextType {
  applications: Application[];
  isLoading: boolean;
  error: string | null;
  fetchApplications: () => Promise<void>;
  submitApplication: (data: ApplicationData) => Promise<void>;
}

export const ApplicationContext = createContext<ApplicationContextType | null>(null);

export function useApplications() {
  const context = useContext(ApplicationContext);
  if (!context) {
    throw new Error("useApplications must be used within ApplicationProvider");
  }
  return context;
}
```

### Custom Hooks for Data Fetching
```typescript
export function useApplications() {
  const [applications, setApplications] = useState<Application[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchApplications = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await api.applications.getAll();
      setApplications(response.data);
    } catch (err) {
      setError("Failed to fetch applications");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchApplications();
  }, [fetchApplications]);

  return { applications, isLoading, error, refetch: fetchApplications };
}
```

## Styling Standards with Tailwind CSS

### Component Styling Patterns
```typescript
// Base component styles
const baseStyles = "rounded-lg border p-4 shadow-sm";
const variantStyles = {
  default: "bg-white border-gray-200",
  success: "bg-green-50 border-green-200",
  error: "bg-red-50 border-red-200",
};

// Using clsx for conditional classes
import { clsx } from "clsx";

<div className={clsx(
  baseStyles,
  variantStyles[variant],
  isLoading && "opacity-50 pointer-events-none"
)}>
```

### Responsive Design Patterns
```typescript
// Mobile-first responsive design
<div className="
  grid grid-cols-1 gap-4
  md:grid-cols-2 md:gap-6
  lg:grid-cols-3 lg:gap-8
">
```

## Internationalization (i18n) for Student Pages

### Language Toggle Component
```typescript
export function LanguageToggle() {
  const [language, setLanguage] = useState<'en' | 'zh'>('en');
  
  const toggleLanguage = () => {
    setLanguage(prev => prev === 'en' ? 'zh' : 'en');
  };
  
  return (
    <button
      onClick={toggleLanguage}
      className="flex items-center gap-2 px-3 py-2 rounded-md"
    >
      {language === 'en' ? '中文' : 'English'}
    </button>
  );
}
```

### Text Content Management
```typescript
const translations = {
  en: {
    dashboard: "Dashboard",
    applications: "Applications",
    submit: "Submit Application",
  },
  zh: {
    dashboard: "儀表板",
    applications: "申請",
    submit: "提交申請",
  },
};

export function useTranslation() {
  const [language] = useLanguage();
  return (key: keyof typeof translations.en) => translations[language][key];
}
```

## API Integration Patterns

### API Client Setup
```typescript
// lib/api.ts
class ApiClient {
  private baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
  
  async request<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {
    const response = await fetch(`${this.baseURL}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return response.json();
  }
  
  // Specific API methods
  applications = {
    getAll: () => this.request<Application[]>('/api/v1/applications'),
    create: (data: ApplicationData) => 
      this.request<Application>('/api/v1/applications', {
        method: 'POST',
        body: JSON.stringify(data),
      }),
  };
}

export const api = new ApiClient();
```

## Error Handling and Loading States

### Error Boundary Component
```typescript
interface ErrorFallbackProps {
  error: Error;
  resetError: () => void;
}

function ErrorFallback({ error, resetError }: ErrorFallbackProps) {
  return (
    <div className="p-6 bg-red-50 border border-red-200 rounded-lg">
      <h2 className="text-lg font-semibold text-red-800 mb-2">
        Something went wrong
      </h2>
      <p className="text-red-600 mb-4">{error.message}</p>
      <button
        onClick={resetError}
        className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
      >
        Try again
      </button>
    </div>
  );
}
```

### Loading States
```typescript
// Skeleton components for loading
export function ApplicationCardSkeleton() {
  return (
    <div className="animate-pulse">
      <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
      <div className="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
      <div className="h-8 bg-gray-200 rounded w-20"></div>
    </div>
  );
}
```

## Performance Optimization

### Component Lazy Loading
```typescript
import { lazy, Suspense } from 'react';

const ApplicationDetail = lazy(() => import('./ApplicationDetail'));

function ApplicationPage() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <ApplicationDetail />
    </Suspense>
  );
}
```

### Image Optimization
```typescript
import Image from 'next/image';

<Image
  src="/images/scholarship-banner.jpg"
  alt="Scholarship program"
  width={800}
  height={400}
  priority={isAboveFold}
  className="rounded-lg"
/>
```

@frontend/components/ui/
@frontend/lib/utils.ts
@frontend/hooks/
