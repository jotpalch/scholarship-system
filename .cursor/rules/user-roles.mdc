---
description: 
globs: 
alwaysApply: true
---
# User Roles Standardization

**CRITICAL**: All user roles across the scholarship system MUST follow this exact standardization.

## Standard Role Definitions

### Backend (Python/FastAPI)
```python
# app/models/user.py
class UserRole(enum.Enum):
    """User role enum"""
    STUDENT = "student"          # 學生
    PROFESSOR = "professor"      # 教授
    COLLEGE = "college"         # 學院審核人員
    ADMIN = "admin"             # 管理員
    SUPER_ADMIN = "super_admin" # 超級管理員
```

### Frontend (TypeScript/React)
```typescript
// All User interfaces MUST use this exact role type
interface User {
  id: string
  name: string
  email: string
  role: "student" | "professor" | "college" | "admin" | "super_admin"
  // ... other properties
}
```

## Role Descriptions

1. **Student (學生)**
   - Can submit scholarship applications
   - Can view their own application status
   - Can upload required documents
   - Language switching enabled for student interface

2. **Professor (教授)**
   - Can review applications from their students
   - Can provide recommendations
   - Can access professor interface
   - Has limited administrative capabilities

3. **College (學院)**
   - College-level review authority
   - Can review applications across departments
   - Replaces the old "reviewer" role
   - Has broader review permissions than professors

4. **Admin (管理員)**
   - Can manage system settings
   - Can review and approve/reject applications
   - Can manage users and scholarships
   - Access to administrative interface

5. **Super Admin (超級管理員)**
   - Full system access
   - Can manage all users and roles
   - System configuration capabilities
   - Highest level of access

## Role Hierarchy & Permissions

```
Super Admin > Admin > College > Professor > Student
```

### Permission Levels
- **Application Management**: College, Admin, Super Admin
- **User Management**: Admin, Super Admin only
- **System Configuration**: Super Admin only
- **Review Authority**: Professor (own students), College (department), Admin (all), Super Admin (all)

## Implementation Standards

### Backend Role Checks
```python
# Correct role checking patterns
user.has_role(UserRole.ADMIN)
user.has_role(UserRole.COLLEGE)
user.is_professor()
user.is_super_admin()

# Authorization for staff actions
if not user.has_role(UserRole.ADMIN) and not user.has_role(UserRole.COLLEGE):
    raise AuthorizationError("Staff access required")
```

### Frontend Role Checks
```typescript
// UI component visibility
{user.role === "professor" && <ProfessorInterface user={user} />}
{(user.role === "admin" || user.role === "college") && <ReviewInterface />}
{user.role === "super_admin" && <SystemManagement />}

// Role-based navigation
const canAccessAdmin = user.role === "admin" || user.role === "super_admin"
const canReview = ["professor", "college", "admin", "super_admin"].includes(user.role)
```

### Role Display Names
```typescript
const getRoleLabel = (role: string, locale: "zh" | "en") => {
  const roleMap = {
    zh: {
      student: "學生",
      professor: "教授", 
      college: "學院",
      admin: "管理員",
      super_admin: "系統管理員"
    },
    en: {
      student: "Student",
      professor: "Professor",
      college: "College",
      admin: "Administrator", 
      super_admin: "Super Administrator"
    }
  }
  return roleMap[locale][role] || role
}
```

## Migration Notes

### Deprecated Roles
- **REVIEWER** → **COLLEGE** (backend migration required)
- **FACULTY** → **PROFESSOR** (frontend cleanup required)

### Database Migration
When updating existing systems:
1. Update UserRole enum in backend
2. Run database migration to update existing user roles
3. Update all frontend components to use new role types
4. Test all role-based access controls

## Testing Requirements

### Test Coverage Required
- Role-based access control for each endpoint
- UI component visibility for each role
- Permission inheritance and restrictions
- Role switching and authentication flows

### Test Data Setup
```python
# Standard test users for each role
test_users = [
    {"username": "student", "role": UserRole.STUDENT},
    {"username": "professor", "role": UserRole.PROFESSOR},
    {"username": "college", "role": UserRole.COLLEGE},
    {"username": "admin", "role": UserRole.ADMIN},
    {"username": "super_admin", "role": UserRole.SUPER_ADMIN}
]
```

## API Documentation

All API endpoints MUST document role requirements:

```python
@router.get("/applications")
async def get_applications(
    current_user: User = Depends(getCurrentUser)
):
    """
    Get applications list
    
    Required Roles: 
    - STUDENT: Can only see own applications
    - PROFESSOR: Can see student applications under supervision
    - COLLEGE: Can see all department applications
    - ADMIN/SUPER_ADMIN: Can see all applications
    """
```

**ENFORCEMENT**: Any deviation from these role definitions will be considered a critical bug and must be fixed immediately.

@backend/app/models/user.py
@frontend/lib/api.ts
@backend/app/core/init_db.py
