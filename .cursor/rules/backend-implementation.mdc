---
description: 
globs: 
alwaysApply: true
---
# Backend Implementation Rules

Follow this systematic approach for backend development to ensure proper architecture and dependencies.

## Implementation Priority Order

### Phase 1: Foundation Setup
1. **Dependencies** - Define all requirements in `requirements.txt`
2. **Configuration** - Set up `app/core/config.py` with environment variables
3. **Database Base** - Create `app/db/base.py` with SQLAlchemy foundation
4. **FastAPI App** - Initialize `app/main.py` with basic FastAPI setup

### Phase 2: Data Layer
1. **User Model** - `app/models/user.py` with role-based access
2. **Scholarship Model** - `app/models/scholarship.py` with GPA requirements
3. **Application Model** - `app/models/application.py` with status workflow
4. **Document Model** - `app/models/document.py` for file attachments

### Phase 3: Validation Layer
1. **User Schemas** - `app/schemas/user.py` with Pydantic validation
2. **Application Schemas** - `app/schemas/application.py` with business rules
3. **Response Schemas** - `app/schemas/base.py` with standard formats

### Phase 4: Business Logic
1. **Auth Service** - `app/services/auth_service.py` for JWT and permissions
2. **User Service** - `app/services/user_service.py` for user management
3. **Application Service** - `app/services/application_service.py` for core logic

### Phase 5: API Layer
1. **Auth Endpoints** - `app/api/v1/endpoints/auth.py`
2. **User Endpoints** - `app/api/v1/endpoints/users.py`
3. **Application Endpoints** - `app/api/v1/endpoints/applications.py`

## Core Business Rules

### User Roles
```python
class UserRole(str, Enum):
    STUDENT = "student"
    FACULTY = "faculty"
    ADMIN = "admin"
    SUPER_ADMIN = "super_admin"
```

### Application Status Workflow
```python
class ApplicationStatus(str, Enum):
    DRAFT = "draft"
    SUBMITTED = "submitted"
    UNDER_REVIEW = "under_review"
    APPROVED = "approved"
    REJECTED = "rejected"
    WITHDRAWN = "withdrawn"
```

### GPA Requirements by Scholarship Type
```python
SCHOLARSHIP_GPA_REQUIREMENTS = {
    "academic_excellence": 3.8,
    "need_based": 2.5,
    "research_grant": 3.5,
    "sports_scholarship": 2.0,
    "international_student": 3.0
}
```

## Required API Endpoints

### Authentication (`/api/v1/auth`)
- `POST /login` - User authentication
- `POST /register` - Student registration
- `POST /refresh` - Token refresh
- `POST /logout` - User logout

### User Management (`/api/v1/users`)
- `GET /me` - Current user profile
- `PUT /me` - Update profile
- `GET /` - List users (admin only)
- `PUT /{userId}` - Update user (admin only)

### Applications (`/api/v1/applications`)
- `GET /` - List applications (role-filtered)
- `POST /` - Create application
- `GET /{applicationId}` - Get application details
- `PUT /{applicationId}` - Update application
- `POST /{applicationId}/submit` - Submit for review
- `POST /{applicationId}/approve` - Approve (faculty/admin)
- `POST /{applicationId}/reject` - Reject (faculty/admin)

### Scholarships (`/api/v1/scholarships`)
- `GET /` - List available scholarships
- `POST /` - Create scholarship (admin only)
- `GET /{scholarshipId}` - Get details
- `PUT /{scholarshipId}` - Update (admin only)

## Database Relationships

### Core Entity Relationships
- User (1) → Applications (Many)
- Scholarship (1) → Applications (Many)
- Application (1) → Documents (Many)
- Application (1) → Reviews (Many)
- User (Faculty/Admin) (1) → Reviews (Many)

### Key Constraints
- Students can only access their own applications
- Faculty can review applications in their department
- Admins have full access to all applications
- GPA validation must match scholarship requirements

## File Upload Requirements

### Document Processing
- **Supported formats**: PDF, JPG, PNG
- **File size limit**: 10MB per file
- **Files per application**: Maximum 5
- **Virus scanning**: Required before storage
- **OCR processing**: For text extraction and validation

### Storage Strategy
- Use MinIO for object storage
- Store metadata in database
- Generate unique file identifiers
- Implement cleanup for unused files

## Testing Strategy

### Coverage Requirements
- **Unit tests**: 90% coverage target
- **Integration tests**: All API endpoints
- **Performance tests**: p95 < 600ms response time

### Test Organization
```python
# Test structure
backend/app/tests/
├── conftest.py          # Pytest configuration
├── test_auth.py         # Authentication tests
├── test_applications.py # Application logic tests
├── test_users.py        # User management tests
└── utils.py             # Test utilities
```

## Environment Configuration

### Required Variables
```bash
# Database
DATABASE_URL=postgresql+asyncpg://user:pass@localhost:5432/scholarship_db

# Security
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# File Storage
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760  # 10MB

# Services
REDIS_URL=redis://localhost:6379/0
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
```

## Service Integration

### Email Notifications
- Application status changes
- Review assignments
- System alerts
- Document upload confirmations

### OCR Service Integration
- Document text extraction
- Content validation
- Accuracy monitoring
- Error handling for poor quality scans

### Cache Strategy
- Redis for session storage
- 10-minute TTL for application data
- Cache invalidation on status changes
- Performance monitoring

@backend/requirements.txt
@backend/app/core/config.py
@backend/app/main.py