---
description: 
globs: 
alwaysApply: true
---
# API Design Patterns and Standards

Always follow these patterns when working with API endpoints and response schemas.

## Standard Response Format

All API endpoints MUST use this response structure:

```python
from typing import Generic, TypeVar, Optional
from pydantic import BaseModel

DataType = TypeVar('DataType')

class ApiResponse(BaseModel, Generic[DataType]):
    """Standard API response format"""
    success: bool
    message: str
    data: Optional[DataType] = None
    errors: Optional[list[str]] = None
    trace_id: Optional[str] = None
```

### Response Examples

Success with data:
```json
{
    "success": true,
    "message": "Application retrieved successfully",
    "data": {
        "id": "12345",
        "student_id": "STU001",
        "status": "submitted"
    },
    "trace_id": "req_abc123"
}
```

Error response:
```json
{
    "success": false,
    "message": "Validation failed",
    "errors": [
        "GPA must be between 0.0 and 4.0",
        "Email format is invalid"
    ],
    "trace_id": "req_abc123"
}
```

## HTTP Status Codes

### Success (2xx)
- `200 OK` - GET, PUT, PATCH requests
- `201 Created` - POST requests creating resources
- `204 No Content` - DELETE requests

### Client Errors (4xx)
- `400 Bad Request` - Validation errors
- `401 Unauthorized` - Authentication required
- `403 Forbidden` - Insufficient permissions
- `404 Not Found` - Resource not found
- `409 Conflict` - Resource conflicts
- `422 Unprocessable Entity` - Semantic errors

### Server Errors (5xx)
- `500 Internal Server Error` - Unexpected errors
- `503 Service Unavailable` - Service unavailable

## Endpoint Naming (camelCase)

### Resource Endpoints
```python
# Users
GET    /api/v1/users              # List users
POST   /api/v1/users              # Create user
GET    /api/v1/users/{userId}     # Get user
PUT    /api/v1/users/{userId}     # Update user
DELETE /api/v1/users/{userId}     # Delete user

# Applications  
GET    /api/v1/applications                    # List applications
POST   /api/v1/applications                    # Create application
GET    /api/v1/applications/{applicationId}    # Get application
PUT    /api/v1/applications/{applicationId}    # Update application
```

### Action Endpoints
```python
# Authentication
POST /api/v1/auth/login
POST /api/v1/auth/register
POST /api/v1/auth/refresh

# Workflow actions
POST /api/v1/applications/{applicationId}/submit
POST /api/v1/applications/{applicationId}/approve
POST /api/v1/applications/{applicationId}/reject
```

## Query Parameters

### Pagination (Standard)
```python
page: int = 1           # Page number (1-based)
size: int = 20          # Items per page  
sort: str = "created_at" # Sort field
order: str = "desc"     # Sort direction (asc/desc)
```

### Filtering
```python
# Application-specific filters
status: str                    # Filter by status
scholarship_type: str          # Filter by type
student_id: str               # Filter by student
created_after: datetime       # Date range filtering
min_gpa: float                # GPA filtering
```

## Dependencies Pattern

Always use these dependency patterns:

```python
from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

async def get_db() -> AsyncSession:
    """Database session dependency"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

async def get_current_user(
    token: str = Depends(security),
    db: AsyncSession = Depends(get_db)
) -> User:
    """Get current authenticated user"""
    # Implementation...
    pass

async def require_admin(
    current_user: User = Depends(get_current_user)
) -> User:
    """Require admin role"""
    if current_user.role not in [UserRole.ADMIN, UserRole.SUPER_ADMIN]:
        raise HTTPException(status_code=403, detail="Admin access required")
    return current_user
```

## Exception Handling

### Custom Exceptions
```python
class ScholarshipException(Exception):
    def __init__(self, message: str, code: int = 400):
        self.message = message
        self.code = code
        super().__init__(self.message)

class AuthenticationError(ScholarshipException):
    def __init__(self, message: str = "Authentication required"):
        super().__init__(message, 401)

class NotFoundError(ScholarshipException):
    def __init__(self, resource: str, identifier: str):
        message = f"{resource} with ID {identifier} not found"
        super().__init__(message, 404)
```

### Exception Handler
```python
async def scholarship_exception_handler(request: Request, exc: ScholarshipException):
    return JSONResponse(
        status_code=exc.code,
        content={
            "success": False,
            "message": exc.message,
            "errors": getattr(exc, 'errors', None),
            "trace_id": getattr(request.state, 'trace_id', None)
        }
    )
```

@api-response-template.py
@exception-handlers.py
