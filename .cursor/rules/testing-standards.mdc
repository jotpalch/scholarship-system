---
description: 
globs: 
alwaysApply: true
---
# Testing Standards and Patterns

Achieve 90% test coverage with systematic testing approach across all layers.

## Backend Testing with pytest

### Test File Organization
```python
# backend/app/tests/
backend/app/tests/
├── conftest.py              # Shared fixtures and configuration
├── test_auth.py             # Authentication tests
├── test_users.py            # User management tests
├── test_applications.py     # Application business logic tests
├── test_scholarships.py     # Scholarship management tests
├── test_api_endpoints.py    # API integration tests
└── utils.py                 # Test utilities and helpers
```

### Test Configuration (conftest.py)
```python
import pytest
import asyncio
from httpx import AsyncClient
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession

from app.main import app
from app.db.session import async_session_maker
from app.core.config import settings

@pytest.fixture
async def db_session():
    """Provide database session for tests"""
    async with async_session_maker() as session:
        yield session
        await session.rollback()

@pytest.fixture
async def client():
    """Provide HTTP client for API testing"""
    async with AsyncClient(app=app, base_url="http://test") as ac:
        yield ac

@pytest.fixture
async def authenticated_client(client, test_user):
    """Provide authenticated client"""
    # Login and get token
    response = await client.post("/api/v1/auth/login", json={
        "email": test_user.email,
        "password": "testpassword123"
    })
    token = response.json()["access_token"]
    client.headers.update({"Authorization": f"Bearer {token}"})
    return client
```

### Unit Testing Patterns

#### Service Layer Tests
```python
# test_application_service.py
import pytest
from app.services.application_service import ApplicationService
from app.models.application import ApplicationStatus

class TestApplicationService:
    async def test_submit_application_success(self, db_session, test_user, test_scholarship):
        """Test successful application submission"""
        # Arrange
        service = ApplicationService(db_session)
        application_data = {
            "scholarship_id": test_scholarship.id,
            "personal_statement": "Test statement",
            "gpa": 3.8,
        }
        
        # Act
        result = await service.submitApplication(test_user.id, application_data)
        
        # Assert
        assert result.status == ApplicationStatus.SUBMITTED
        assert result.student_id == test_user.id
        assert result.gpa == 3.8

    async def test_validate_gpa_requirement_invalid(self, db_session):
        """Test GPA requirement validation failure"""
        # Arrange
        service = ApplicationService(db_session)
        
        # Act & Assert
        with pytest.raises(ValidationError) as exc_info:
            await service.validateGpaRequirement(2.0, "academic_excellence")
        
        assert "GPA requirement not met" in str(exc_info.value)
```

#### Model Tests
```python
# test_models.py
import pytest
from app.models.user import User, UserRole
from app.models.application import Application, ApplicationStatus

class TestUserModel:
    def test_user_creation_with_valid_data(self):
        """Test user model creation with valid data"""
        user = User(
            email="test@university.edu",
            first_name="John",
            last_name="Doe",
            role=UserRole.STUDENT
        )
        
        assert user.email == "test@university.edu"
        assert user.full_name == "John Doe"
        assert user.role == UserRole.STUDENT

    def test_user_password_hashing(self):
        """Test password is properly hashed"""
        user = User(email="test@test.com")
        user.set_password("plaintext_password")
        
        assert user.hashed_password != "plaintext_password"
        assert user.verify_password("plaintext_password")
        assert not user.verify_password("wrong_password")
```

### API Integration Tests
```python
# test_api_endpoints.py
import pytest
from httpx import AsyncClient

class TestApplicationEndpoints:
    async def test_create_application_authenticated(self, authenticated_client):
        """Test application creation with authenticated user"""
        application_data = {
            "scholarshipId": "scholarship_123",
            "personalStatement": "Test personal statement",
            "gpa": 3.5
        }
        
        response = await authenticated_client.post(
            "/api/v1/applications",
            json=application_data
        )
        
        assert response.status_code == 201
        data = response.json()
        assert data["success"] is True
        assert data["data"]["gpa"] == 3.5

    async def test_get_applications_requires_auth(self, client):
        """Test that getting applications requires authentication"""
        response = await client.get("/api/v1/applications")
        
        assert response.status_code == 401
        data = response.json()
        assert data["success"] is False
```

## Frontend Testing with Jest + Testing Library

### Component Testing Patterns
```typescript
// components/ApplicationForm.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { ApplicationForm } from './ApplicationForm';

describe('ApplicationForm Component', () => {
  const mockOnSubmit = jest.fn();
  
  beforeEach(() => {
    mockOnSubmit.mockClear();
  });

  it('should render all form fields correctly', () => {
    render(<ApplicationForm onSubmit={mockOnSubmit} />);
    
    expect(screen.getByLabelText(/scholarship/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/personal statement/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/gpa/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  it('should show validation errors for invalid GPA', async () => {
    const user = userEvent.setup();
    render(<ApplicationForm onSubmit={mockOnSubmit} />);
    
    const gpaInput = screen.getByLabelText(/gpa/i);
    await user.type(gpaInput, '5.0');
    await user.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(screen.getByText(/gpa must be between 0.0 and 4.0/i)).toBeInTheDocument();
    });
    
    expect(mockOnSubmit).not.toHaveBeenCalled();
  });

  it('should submit form with valid data', async () => {
    const user = userEvent.setup();
    render(<ApplicationForm onSubmit={mockOnSubmit} />);
    
    await user.selectOptions(
      screen.getByLabelText(/scholarship/i),
      'academic_excellence'
    );
    await user.type(
      screen.getByLabelText(/personal statement/i),
      'This is my personal statement with more than 100 characters to meet the minimum requirement.'
    );
    await user.type(screen.getByLabelText(/gpa/i), '3.8');
    
    await user.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledWith({
        scholarshipId: 'academic_excellence',
        personalStatement: expect.stringContaining('personal statement'),
        gpa: 3.8
      });
    });
  });
});
```

### Hook Testing
```typescript
// hooks/useApplications.test.tsx
import { renderHook, waitFor } from '@testing-library/react';
import { useApplications } from './useApplications';
import { api } from '@/lib/api';

// Mock API
jest.mock('@/lib/api');
const mockApi = api as jest.Mocked<typeof api>;

describe('useApplications Hook', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should fetch applications on mount', async () => {
    const mockApplications = [
      { id: '1', status: 'submitted', gpa: 3.5 },
      { id: '2', status: 'approved', gpa: 3.8 }
    ];
    
    mockApi.applications.getAll.mockResolvedValue({
      success: true,
      data: mockApplications,
      message: 'Success'
    });

    const { result } = renderHook(() => useApplications());

    expect(result.current.isLoading).toBe(true);

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.applications).toEqual(mockApplications);
    expect(result.current.error).toBeNull();
  });

  it('should handle fetch error', async () => {
    mockApi.applications.getAll.mockRejectedValue(new Error('API Error'));

    const { result } = renderHook(() => useApplications());

    await waitFor(() => {
      expect(result.current.isLoading).toBe(false);
    });

    expect(result.current.applications).toEqual([]);
    expect(result.current.error).toBe('Failed to fetch applications');
  });
});
```

## End-to-End Testing with Playwright

### Page Object Model
```typescript
// e2e/pages/StudentDashboard.ts
import { Page, Locator } from '@playwright/test';

export class StudentDashboardPage {
  readonly page: Page;
  readonly applicationsList: Locator;
  readonly newApplicationButton: Locator;
  readonly languageToggle: Locator;

  constructor(page: Page) {
    this.page = page;
    this.applicationsList = page.locator('[data-testid="applications-list"]');
    this.newApplicationButton = page.locator('button:has-text("New Application")');
    this.languageToggle = page.locator('[data-testid="language-toggle"]');
  }

  async goto() {
    await this.page.goto('/student/dashboard');
  }

  async createNewApplication() {
    await this.newApplicationButton.click();
  }

  async switchLanguage() {
    await this.languageToggle.click();
  }
}
```

### E2E Test Scenarios
```typescript
// e2e/student-workflow.spec.ts
import { test, expect } from '@playwright/test';
import { StudentDashboardPage } from './pages/StudentDashboard';
import { ApplicationFormPage } from './pages/ApplicationForm';

test.describe('Student Application Workflow', () => {
  test('student can submit application successfully', async ({ page }) => {
    // Setup
    const dashboard = new StudentDashboardPage(page);
    const applicationForm = new ApplicationFormPage(page);
    
    // Login as student
    await page.goto('/auth/login');
    await page.fill('[name="email"]', 'student@test.com');
    await page.fill('[name="password"]', 'password123');
    await page.click('button[type="submit"]');
    
    // Navigate to dashboard
    await dashboard.goto();
    await expect(dashboard.applicationsList).toBeVisible();
    
    // Create new application
    await dashboard.createNewApplication();
    await expect(page).toHaveURL(/.*\/applications\/new/);
    
    // Fill application form
    await applicationForm.selectScholarship('academic_excellence');
    await applicationForm.fillPersonalStatement(
      'This is my personal statement explaining why I deserve this scholarship.'
    );
    await applicationForm.fillGPA('3.8');
    
    // Submit application
    await applicationForm.submit();
    
    // Verify success
    await expect(page.locator('text=Application submitted successfully')).toBeVisible();
    await expect(page).toHaveURL(/.*\/applications\/\d+/);
  });

  test('application form validates GPA requirements', async ({ page }) => {
    const applicationForm = new ApplicationFormPage(page);
    
    await page.goto('/student/applications/new');
    
    // Try to submit with invalid GPA
    await applicationForm.selectScholarship('academic_excellence');
    await applicationForm.fillGPA('2.0'); // Below requirement
    await applicationForm.submit();
    
    // Should show validation error
    await expect(page.locator('text=GPA requirement not met')).toBeVisible();
  });
});
```

## Performance Testing

### API Performance Tests
```python
# test_performance.py
import pytest
import asyncio
import time
from httpx import AsyncClient

class TestAPIPerformance:
    async def test_applications_list_performance(self, authenticated_client):
        """Test applications list endpoint performance"""
        start_time = time.time()
        
        response = await authenticated_client.get("/api/v1/applications")
        
        end_time = time.time()
        response_time = (end_time - start_time) * 1000  # Convert to milliseconds
        
        assert response.status_code == 200
        assert response_time < 600  # p95 < 600ms requirement

    async def test_concurrent_requests(self, authenticated_client):
        """Test system under concurrent load"""
        async def make_request():
            return await authenticated_client.get("/api/v1/applications")
        
        # Simulate 10 concurrent requests
        tasks = [make_request() for _ in range(10)]
        responses = await asyncio.gather(*tasks)
        
        # All requests should succeed
        for response in responses:
            assert response.status_code == 200
```

## Test Data Management

### Test Fixtures
```python
# conftest.py fixtures
@pytest.fixture
async def test_user(db_session):
    """Create test user"""
    user = User(
        email="test@university.edu",
        first_name="Test",
        last_name="User",
        role=UserRole.STUDENT
    )
    user.set_password("testpassword123")
    db_session.add(user)
    await db_session.commit()
    return user

@pytest.fixture
async def test_scholarship(db_session):
    """Create test scholarship"""
    scholarship = Scholarship(
        name="Academic Excellence",
        type="academic_excellence",
        gpa_requirement=3.8,
        description="Test scholarship",
        amount=5000
    )
    db_session.add(scholarship)
    await db_session.commit()
    return scholarship
```

### Mock Data Utilities
```typescript
// frontend/lib/test-utils.tsx
export const mockApplicationData = {
  id: '1',
  studentId: 'student_123',
  scholarshipId: 'scholarship_123',
  status: 'submitted' as ApplicationStatus,
  gpa: 3.8,
  personalStatement: 'Test personal statement',
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
};

export function createMockApplication(overrides: Partial<Application> = {}) {
  return { ...mockApplicationData, ...overrides };
}
```

@backend/app/tests/conftest.py
@frontend/lib/test-utils.tsx
@e2e/playwright.config.ts
