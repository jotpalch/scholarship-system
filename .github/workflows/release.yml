name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./frontend/package.json').version")
          
          # Calculate next version based on release type
          case "${{ github.event.inputs.release_type }}" in
            major)
              VERSION=$(npx semver $CURRENT_VERSION -i major)
              ;;
            minor)
              VERSION=$(npx semver $CURRENT_VERSION -i minor)
              ;;
            patch)
              VERSION=$(npx semver $CURRENT_VERSION -i patch)
              ;;
            prerelease)
              VERSION=$(npx semver $CURRENT_VERSION -i prerelease --preid=beta)
              ;;
          esac
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "### Release Version: $VERSION" >> $GITHUB_STEP_SUMMARY

    - name: Generate changelog
      id: changelog
      run: |
        # Install changelog generator
        npm install -g conventional-changelog-cli
        
        # Generate changelog for this version
        conventional-changelog -p angular -i CHANGELOG.md -s -r 1 > changelog_new.md || true
        
        # If no conventional commits, create manual changelog
        if [ ! -s changelog_new.md ]; then
          cat > changelog_new.md << EOF
        ## What's Changed
        
        ### Features
        - Updated dependencies
        - Performance improvements
        
        ### Bug Fixes
        - Various bug fixes and improvements
        
        ### Full Changelog
        https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...HEAD
        EOF
        fi
        
        # Save changelog to output
        CHANGELOG=$(cat changelog_new.md | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog_new.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Display in summary
        echo "### Changelog" >> $GITHUB_STEP_SUMMARY
        cat changelog_new.md >> $GITHUB_STEP_SUMMARY

    - name: Update version files
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # Update frontend package.json
        cd frontend
        npm version $VERSION --no-git-tag-version
        cd ..
        
        # Update backend version
        echo "__version__ = '$VERSION'" > backend/app/__version__.py
        
        # Update docker-compose versions
        sed -i "s/image: .*/image: ghcr.io\/${{ github.repository }}\/backend:$VERSION/g" docker-compose.yml
        sed -i "s/image: .*/image: ghcr.io\/${{ github.repository }}\/frontend:$VERSION/g" docker-compose.yml

    - name: Create release PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: prepare release v${{ steps.version.outputs.version }}"
        title: "Release v${{ steps.version.outputs.version }}"
        body: |
          ## Release v${{ steps.version.outputs.version }}
          
          This PR prepares the release for version ${{ steps.version.outputs.version }}.
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Checklist
          - [ ] All tests pass
          - [ ] Version numbers updated
          - [ ] Changelog reviewed
          - [ ] Documentation updated
          
          After merging this PR, the release workflow will continue automatically.
        branch: release/v${{ steps.version.outputs.version }}
        labels: |
          release
          automated

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        VERSION=${{ needs.prepare-release.outputs.version }}
        
        # Build backend
        docker build -t ghcr.io/${{ github.repository }}/backend:$VERSION \
                     -t ghcr.io/${{ github.repository }}/backend:latest \
                     ./backend
        
        # Build frontend
        docker build -t ghcr.io/${{ github.repository }}/frontend:$VERSION \
                     -t ghcr.io/${{ github.repository }}/frontend:latest \
                     --build-arg NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }} \
                     ./frontend
        
        # Push images
        docker push ghcr.io/${{ github.repository }}/backend:$VERSION
        docker push ghcr.io/${{ github.repository }}/backend:latest
        docker push ghcr.io/${{ github.repository }}/frontend:$VERSION
        docker push ghcr.io/${{ github.repository }}/frontend:latest

    - name: Create Git tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a v${{ needs.prepare-release.outputs.version }} -m "Release v${{ needs.prepare-release.outputs.version }}"
        git push origin v${{ needs.prepare-release.outputs.version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare-release.outputs.version }}
        name: Release v${{ needs.prepare-release.outputs.version }}
        body: ${{ needs.prepare-release.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
        generate_release_notes: true

    - name: Create deployment artifacts
      run: |
        VERSION=${{ needs.prepare-release.outputs.version }}
        
        # Create deployment package
        mkdir -p release-artifacts
        
        # Copy deployment files
        cp -r k8s release-artifacts/
        cp docker-compose.yml release-artifacts/
        cp docker-compose.prod.yml release-artifacts/
        
        # Create deployment script
        cat > release-artifacts/deploy.sh << 'EOF'
        #!/bin/bash
        VERSION=$1
        
        echo "Deploying Scholarship System v$VERSION"
        
        # Update Kubernetes deployments
        kubectl set image deployment/backend backend=ghcr.io/${{ github.repository }}/backend:$VERSION
        kubectl set image deployment/frontend frontend=ghcr.io/${{ github.repository }}/frontend:$VERSION
        
        # Wait for rollout
        kubectl rollout status deployment/backend
        kubectl rollout status deployment/frontend
        
        echo "Deployment complete!"
        EOF
        
        chmod +x release-artifacts/deploy.sh
        
        # Create archive
        tar -czf scholarship-system-v$VERSION.tar.gz release-artifacts/

    - name: Upload release artifacts
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare-release.outputs.version }}
        files: |
          scholarship-system-v${{ needs.prepare-release.outputs.version }}.tar.gz

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    
    steps:
    - name: Notify release status
      run: |
        if [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "### ✅ Release v${{ needs.prepare-release.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Docker images pushed to registry" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment artifacts uploaded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy to production using the deployment script" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor application metrics" >> $GITHUB_STEP_SUMMARY
          echo "3. Announce release to stakeholders" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Release failed!" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create release announcement
      if: needs.create-release.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.prepare-release.outputs.version }}';
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🎉 Release v${version} Announcement`,
            body: `## Scholarship System v${version} Released!
            
            We're excited to announce the release of version ${version} of the Scholarship Management System.
            
            ### What's New
            ${{ needs.prepare-release.outputs.changelog }}
            
            ### Deployment
            - Docker images are available at \`ghcr.io/${{ github.repository }}\`
            - Use the deployment script from the release artifacts
            
            ### Documentation
            - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${version})
            - [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/docs/deployment.md)
            
            Thank you to all contributors!`,
            labels: ['announcement', 'release']
          });