name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [frontend, backend]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js (for frontend)
      if: matrix.directory == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python (for backend)
      if: matrix.directory == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements*.txt

    - name: Update frontend dependencies
      if: matrix.directory == 'frontend'
      working-directory: ./frontend
      run: |
        # Update dependencies
        npm update --save
        
        # Run audit fix with proper error handling
        npm audit fix --audit-level=moderate || true
        
        # Check for major updates
        npx npm-check-updates -u --target minor
        npm install
        
        # Update lockfile
        npm install --package-lock-only
        
    - name: Update backend dependencies
      if: matrix.directory == 'backend'
      working-directory: ./backend
      run: |
        # Create virtual environment
        python -m venv venv
        source venv/bin/activate
        
        # Install current dependencies
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
        # Install update tools
        pip install pip-tools
        
        # Update dependencies using pip-tools
        pip-compile --upgrade requirements.in -o requirements.txt || true
        pip-compile --upgrade requirements-dev.in -o requirements-dev.txt || true
        
        # If .in files don't exist, use pip-review
        if [ ! -f requirements.in ]; then
          pip install pip-review
          pip-review --auto --continue-on-fail || true
          pip freeze > requirements.txt
        fi

    - name: Check for changes
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.check_changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update ${{ matrix.directory }} dependencies'
        title: 'chore: Update ${{ matrix.directory }} dependencies'
        body: |
          ## Automated dependency update for ${{ matrix.directory }}
          
          This PR updates dependencies in the ${{ matrix.directory }} directory.
          
          ### Changes made:
          - Updated all dependencies to latest compatible versions
          - Fixed security vulnerabilities where possible
          - Updated lockfiles
          
          ### Checklist:
          - [ ] All tests pass
          - [ ] No breaking changes introduced
          - [ ] Security vulnerabilities addressed
          
          Please review the changes and run tests before merging.
          
          ---
          *This PR was automatically generated by the dependency update workflow.*
        branch: dependency-update-${{ matrix.directory }}-${{ github.run_number }}
        delete-branch: true
        labels: |
          dependencies
          automated
          ${{ matrix.directory }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements*.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --json > npm-audit.json || true
        
        # Parse and display audit results
        if [ -f npm-audit.json ]; then
          echo "### NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat npm-audit.json | jq '.metadata' >> $GITHUB_STEP_SUMMARY || echo "Failed to parse npm audit results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Run Python safety check
      working-directory: ./backend
      run: |
        safety check --json > safety-audit.json || true
        
        # Run bandit security linter
        bandit -r app -f json -o bandit-audit.json || true
        
        # Display results
        if [ -f safety-audit.json ]; then
          echo "### Python Safety Check Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat safety-audit.json | head -20 >> $GITHUB_STEP_SUMMARY || echo "Failed to parse safety results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check for critical vulnerabilities
      id: check_vulnerabilities
      run: |
        CRITICAL_VULNS=0
        
        # Check npm audit
        if [ -f frontend/npm-audit.json ]; then
          CRITICAL_NPM=$(cat frontend/npm-audit.json | jq '.metadata.vulnerabilities.critical // 0' || echo 0)
          HIGH_NPM=$(cat frontend/npm-audit.json | jq '.metadata.vulnerabilities.high // 0' || echo 0)
          CRITICAL_VULNS=$((CRITICAL_VULNS + CRITICAL_NPM + HIGH_NPM))
        fi
        
        # Check Python safety
        if [ -f backend/safety-audit.json ]; then
          CRITICAL_PY=$(cat backend/safety-audit.json | jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' || echo 0)
          CRITICAL_VULNS=$((CRITICAL_VULNS + CRITICAL_PY))
        fi
        
        echo "critical_count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
        
        if [ $CRITICAL_VULNS -gt 0 ]; then
          echo "❌ Found $CRITICAL_VULNS critical/high vulnerabilities!" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No critical/high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results-${{ github.run_number }}
        path: |
          frontend/npm-audit.json
          backend/safety-audit.json
          backend/bandit-audit.json
        retention-days: 30

    - name: Create security issue
      if: steps.check_vulnerabilities.outputs.critical_count > 0
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🚨 Security vulnerabilities detected in dependencies';
          const body = `Security audit found **${{ steps.check_vulnerabilities.outputs.critical_count }}** critical/high vulnerabilities in dependencies.
          
          ### Action Required:
          1. Review the [security audit results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Update vulnerable dependencies
          3. Test thoroughly before deploying
          
          ### Audit Summary:
          - Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Branch: ${{ github.ref }}
          - Triggered by: ${{ github.event_name }}
          
          ---
          *This issue was automatically created by the security audit workflow.*`;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'security,dependencies'
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Security vulnerabilities detected')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'dependencies', 'high-priority']
            });
          } else {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `Updated security audit results:\n\n${body}`
            });
          } 