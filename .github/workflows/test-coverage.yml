name: Test Coverage

on:
  workflow_call:
    inputs: {}
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 90

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements*.txt

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run unit tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: "sqlite+aiosqlite:///:memory:"
        SECRET_KEY: test-secret-key-for-unit-testing
        TESTING: true
      run: |
        # Run only unit tests
        pytest app/tests -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-unit-coverage
        path: |
          backend/coverage.xml
          backend/htmlcov/
        retention-days: 7

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
          - 9001:9001

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements*.txt

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
      run: |
        alembic upgrade head

    - name: Run integration tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        DATABASE_URL_SYNC: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin123
        SECRET_KEY: test-secret-key-for-integration-testing
        TESTING: true
      run: |
        # Run integration tests
        pytest app/tests/integration -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload integration test coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-integration-coverage
        path: |
          backend/coverage.xml
          backend/htmlcov/
        retention-days: 7

  backend-api-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x ./test-docker.sh

    - name: Start services with Docker
      run: |
        ./test-docker.sh start
        # Wait for services to be ready
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Backend is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Backend failed to start"
            docker compose -f docker-compose.test.yml logs backend
            exit 1
          fi
          echo "Waiting for backend... attempt $i/30"
          sleep 5
        done

    - name: Run API tests
      run: |
        # Install test dependencies
        pip install httpx pytest pytest-asyncio

        # Create API test script
        cat > test_api.py << 'EOF'
        import pytest
        import httpx
        import asyncio

        BASE_URL = "http://localhost:8000"

        @pytest.mark.asyncio
        async def test_health_endpoint():
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{BASE_URL}/health")
                assert response.status_code == 200
                assert response.json()["status"] == "healthy"

        @pytest.mark.asyncio
        async def test_api_docs():
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{BASE_URL}/docs")
                assert response.status_code == 200

        @pytest.mark.asyncio
        async def test_openapi_schema():
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{BASE_URL}/openapi.json")
                assert response.status_code == 200
                schema = response.json()
                assert "openapi" in schema
                assert "paths" in schema

        @pytest.mark.asyncio
        async def test_rate_limiting():
            async with httpx.AsyncClient() as client:
                # Make multiple requests quickly
                responses = []
                for _ in range(100):
                    response = await client.get(f"{BASE_URL}/api/v1/scholarships")
                    responses.append(response)
                
                # Check if rate limiting is working
                status_codes = [r.status_code for r in responses]
                assert 429 in status_codes or all(code in [200, 401] for code in status_codes)

        if __name__ == "__main__":
            pytest.main([__file__, "-v"])
        EOF

        python test_api.py

    - name: Stop services
      if: always()
      run: ./test-docker.sh stop

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run unit tests with coverage
      working-directory: ./frontend
      env:
        CI: true
      run: |
        # Run tests with coverage threshold
        npm run test:ci -- --coverage --passWithNoTests

    - name: Upload frontend coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-unit-coverage
        path: |
          frontend/coverage/
        retention-days: 7

  frontend-component-tests:
    name: Frontend Component Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Create component test file
      working-directory: ./frontend
      run: |
        mkdir -p __tests__/components
        cat > __tests__/components/comprehensive.test.tsx << 'EOF'
        import { render, screen, fireEvent, waitFor } from '@testing-library/react';
        import userEvent from '@testing-library/user-event';

        describe('Component Rendering Tests', () => {
          test('should handle error boundaries correctly', () => {
            const ThrowError = () => {
              throw new Error('Test error');
            };

            // Test error boundary handling
            expect(() => render(<ThrowError />)).toThrow();
          });

          test('should handle async operations', async () => {
            const AsyncComponent = () => {
              const [data, setData] = React.useState(null);
              
              React.useEffect(() => {
                setTimeout(() => setData('loaded'), 100);
              }, []);

              return <div>{data || 'loading'}</div>;
            };

            render(<AsyncComponent />);
            expect(screen.getByText('loading')).toBeInTheDocument();
            
            await waitFor(() => {
              expect(screen.getByText('loaded')).toBeInTheDocument();
            });
          });
        });
        EOF

    - name: Run component tests
      working-directory: ./frontend
      env:
        CI: true
      run: |
        npm test -- __tests__/components --coverage

  e2e-tests:
    name: E2E Tests with Coverage
    runs-on: ubuntu-latest
    needs: [backend-api-tests, frontend-unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x ./test-docker.sh
        chmod +x ./frontend/run-e2e-tests.sh

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npx playwright install --with-deps chromium firefox webkit

    - name: Start services
      run: |
        ./test-docker.sh start
        # Enhanced health check
        ./test-docker.sh status

    - name: Run E2E tests with multiple browsers
      working-directory: ./frontend
      env:
        CI: true
        PLAYWRIGHT_BROWSERS: chromium,firefox,webkit
      run: |
        # Run tests on all browsers
        npx playwright test --project=chromium --reporter=html
        npx playwright test --project=firefox --reporter=html
        npx playwright test --project=webkit --reporter=html

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 7

    - name: Stop services
      if: always()
      run: ./test-docker.sh stop

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install safety bandit semgrep

    - name: Run Python security tests
      working-directory: ./backend
      run: |
        # Check for known vulnerabilities
        safety check --json > safety-report.json || true
        
        # Run bandit security linter
        bandit -r app -f json -o bandit-report.json || true
        
        # Run semgrep
        semgrep --config=auto --json -o semgrep-report.json app/ || true

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --json > npm-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-test-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
          backend/semgrep-report.json
          frontend/npm-audit-report.json
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-api-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6 -y

    - name: Start services
      run: |
        chmod +x ./test-docker.sh
        ./test-docker.sh start

    - name: Create performance test scripts
      run: |
        mkdir -p performance-tests
        
        cat > performance-tests/api-load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Rate } from 'k6/metrics';

        const errorRate = new Rate('errors');

        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '1m', target: 50 },
            { duration: '2m', target: 100 },
            { duration: '1m', target: 50 },
            { duration: '30s', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<600'], // 95% of requests must complete below 600ms
            errors: ['rate<0.1'], // Error rate must be below 10%
          },
        };

        export default function () {
          const responses = http.batch([
            ['GET', 'http://localhost:8000/health'],
            ['GET', 'http://localhost:8000/api/v1/scholarships'],
          ]);

          responses.forEach(response => {
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 600ms': (r) => r.timings.duration < 600,
            });
            errorRate.add(response.status !== 200);
          });

          sleep(1);
        }
        EOF

    - name: Run performance tests
      run: |
        k6 run performance-tests/api-load-test.js --out json=performance-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: performance-results.json
        retention-days: 7

    - name: Stop services
      if: always()
      run: ./test-docker.sh stop

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [
      backend-unit-tests,
      backend-integration-tests,
      frontend-unit-tests,
      frontend-component-tests,
      e2e-tests
    ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install coverage tools
      run: |
        pip install coverage[toml] coverage-badge

    - name: Merge backend coverage reports
      run: |
        # Combine backend coverage
        coverage combine coverage-reports/backend-*/coverage.xml || true
        coverage report
        coverage html

    - name: Generate coverage badges
      run: |
        # Generate coverage badge
        coverage-badge -o coverage-badge.svg

    - name: Create coverage summary
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
        coverage report --format=markdown >> $GITHUB_STEP_SUMMARY || echo "Backend coverage report not available" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Check artifacts for detailed frontend coverage report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Threshold: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY

    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      with:
        name: combined-coverage-report
        path: |
          htmlcov/
          coverage-badge.svg
        retention-days: 30

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverageComment = '## 📊 Test Coverage Report\n\n';
          coverageComment += 'Coverage threshold: **${{ env.COVERAGE_THRESHOLD }}%**\n\n';
          
          // Add coverage details
          coverageComment += '### Test Results\n';
          coverageComment += '- ✅ Backend Unit Tests\n';
          coverageComment += '- ✅ Backend Integration Tests\n';
          coverageComment += '- ✅ Frontend Unit Tests\n';
          coverageComment += '- ✅ Frontend Component Tests\n';
          coverageComment += '- ✅ E2E Tests\n';
          coverageComment += '- ✅ Security Tests\n';
          coverageComment += '- ✅ Performance Tests\n';
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageComment
          });