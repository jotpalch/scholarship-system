# Infrastructure Cursor Rules - Scholarship System

## Technology Stack
- **Deployment**: Docker, Kubernetes, NGINX
- **Cloud**: AWS/GCP (based on configuration)
- **Monitoring**: Prometheus, Grafana
- **Database**: PostgreSQL 15
- **Cache**: Redis
- **CI/CD**: GitHub Actions (or similar)

## Directory Structure (infra/)
- `k8s/` - Kubernetes manifests
  - `dev/` - Development environment
  - `prod/` - Production environment
- `helm/` - Helm charts and values
- `scripts/` - Deployment and management scripts
- `docker/` - Dockerfile configurations
- `terraform/` - Infrastructure as Code (if used)

## Naming Conventions

### Kubernetes Resources
- Resource names: `kebab-case` (e.g., `scholarship-backend`, `postgres-primary`)
- Labels: `camelCase` (e.g., `app: scholarshipBackend`)
- Namespaces: `kebab-case` (e.g., `scholarship-prod`, `scholarship-dev`)

### Files and Scripts
- YAML files: `kebab-case` (e.g., `deployment.yaml`, `ingress-config.yaml`)
- Shell scripts: `kebab-case` (e.g., `deploy.sh`, `backup-db.sh`)
- Docker files: `Dockerfile`, `docker-compose.yml`

## Kubernetes Standards

### Deployment Configuration
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scholarship-backend
  labels:
    app: scholarshipBackend
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: scholarshipBackend
  template:
    metadata:
      labels:
        app: scholarshipBackend
    spec:
      containers:
      - name: backend
        image: scholarship-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: url
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
```

### Service Configuration
```yaml
apiVersion: v1
kind: Service
metadata:
  name: scholarship-backend
  labels:
    app: scholarshipBackend
spec:
  selector:
    app: scholarshipBackend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP
```

## Docker Standards

### Dockerfile Best Practices
```dockerfile
# Use specific version tags
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM node:22-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start application
CMD ["node", "server.js"]
```

### Multi-stage Builds
- Use multi-stage builds for optimization
- Separate build and runtime environments
- Minimize final image size
- Include health checks

## Environment Management

### Environment Separation
- **Development**: `scholarship-dev` namespace
- **Staging**: `scholarship-staging` namespace
- **Production**: `scholarship-prod` namespace

### Configuration Management
```yaml
# ConfigMap for application settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  API_URL: "https://api.scholarship.edu.tw"
  REDIS_HOST: "redis-service"
  MAX_FILE_SIZE: "10MB"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  url: <base64-encoded-database-url>
  password: <base64-encoded-password>
```

## Monitoring and Logging

### Health Checks
```yaml
# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
```

### Resource Monitoring
```yaml
resources:
  requests:
    memory: "256Mi"
    cpu: "250m"
  limits:
    memory: "512Mi"
    cpu: "500m"
```

## Security Standards

### Pod Security
```yaml
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

containers:
- name: app
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
```

### Network Policies
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
spec:
  podSelector:
    matchLabels:
      app: scholarshipBackend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: scholarshipFrontend
    ports:
    - protocol: TCP
      port: 8000
```

## Deployment Scripts

### Deployment Automation
```bash
#!/bin/bash
# deploy.sh

set -euo pipefail

ENVIRONMENT=${1:-dev}
NAMESPACE="scholarship-${ENVIRONMENT}"

echo "Deploying to ${ENVIRONMENT} environment..."

# Apply Kubernetes manifests
kubectl apply -f k8s/${ENVIRONMENT}/ -n ${NAMESPACE}

# Wait for deployment to be ready
kubectl rollout status deployment/scholarship-backend -n ${NAMESPACE}
kubectl rollout status deployment/scholarship-frontend -n ${NAMESPACE}

# Run health checks
./scripts/health-check.sh ${ENVIRONMENT}

echo "Deployment completed successfully!"
```

### Backup Scripts
```bash
#!/bin/bash
# backup-db.sh

NAMESPACE=${1:-scholarship-prod}
BACKUP_NAME="db-backup-$(date +%Y%m%d-%H%M%S)"

echo "Creating database backup: ${BACKUP_NAME}"

kubectl exec -n ${NAMESPACE} deployment/postgres-primary -- \
  pg_dump -U postgres scholarship_db | \
  gzip > "backups/${BACKUP_NAME}.sql.gz"

echo "Backup completed: backups/${BACKUP_NAME}.sql.gz"
```

## Helm Charts

### Chart Structure
```yaml
# Chart.yaml
apiVersion: v2
name: scholarship-system
description: Scholarship Application Management System
version: 1.0.0
appVersion: "1.0.0"

# values.yaml
backend:
  image:
    repository: scholarship-backend
    tag: latest
    pullPolicy: IfNotPresent
  
  replicas: 3
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

frontend:
  image:
    repository: scholarship-frontend
    tag: latest
    pullPolicy: IfNotPresent
  
  replicas: 2
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
```

## Database Management

### PostgreSQL Configuration
```yaml
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-cluster
spec:
  instances: 3
  
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      work_mem: "4MB"
  
  bootstrap:
    initdb:
      database: scholarship_db
      owner: scholarship_user
      secret:
        name: postgres-credentials
  
  storage:
    size: 100Gi
    storageClass: "fast-ssd"
  
  backup:
    barmanObjectStore:
      destinationPath: "s3://backups/postgres"
      s3Credentials:
        accessKeyId:
          name: s3-credentials
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: s3-credentials
          key: SECRET_ACCESS_KEY
```

## Load Balancing and Ingress

### NGINX Ingress Configuration
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scholarship-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - scholarship.edu.tw
    - api.scholarship.edu.tw
    secretName: scholarship-tls
  
  rules:
  - host: scholarship.edu.tw
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: scholarship-frontend
            port:
              number: 3000
  
  - host: api.scholarship.edu.tw
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: scholarship-backend
            port:
              number: 8000
```

## Performance and Scaling

### Horizontal Pod Autoscaler
```yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: scholarship-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: scholarship-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
```

## Best Practices

### Configuration Management
- Use ConfigMaps for non-sensitive configuration
- Use Secrets for sensitive data
- Implement proper RBAC policies
- Use resource quotas and limits

### Deployment Strategy
- Use rolling updates for zero-downtime deployments
- Implement proper health checks
- Use blue-green or canary deployments for critical updates
- Maintain proper backup and disaster recovery procedures

### Monitoring and Alerting
- Set up comprehensive monitoring with Prometheus
- Configure alerting for critical metrics
- Implement log aggregation and analysis
- Monitor application performance and user experience

### Security
- Follow principle of least privilege
- Regularly update base images and dependencies
- Implement network segmentation
- Use image scanning for vulnerabilities
- Enable audit logging 