# Global configuration
global:
  environment: production
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "fast-ssd"

# Application configuration
app:
  name: scholarship-system
  version: "1.0.0"

# Backend FastAPI configuration
backend:
  enabled: true
  name: scholarship-backend
  
  image:
    repository: scholarship-backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
      
  env:
    LOG_LEVEL: "INFO"
    WORKERS: "4"
    ENVIRONMENT: "production"
    
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL

# Frontend Next.js configuration
frontend:
  enabled: true
  name: scholarship-frontend
  
  image:
    repository: scholarship-frontend
    tag: "latest"
    pullPolicy: IfNotPresent
    
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
      
  env:
    NODE_ENV: "production"
    NEXT_TELEMETRY_DISABLED: "1"
    NEXT_PUBLIC_API_URL: "https://api.scholarship.edu.tw/api/v1"
    
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL

# PostgreSQL database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "prod_password_strong_1234567890"
    username: "scholarship_prod"
    password: "prod_password_strong_1234567890"
    database: "scholarship_prod"
    
  architecture: standalone
  
  primary:
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 100Gi
      
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
        
    configuration: |
      shared_buffers = 256MB
      effective_cache_size = 1GB
      maintenance_work_mem = 64MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      max_connections = 200
      log_min_duration_statement = 1000
      log_statement = 'error'
      
    securityContext:
      enabled: true
      fsGroup: 999
      runAsUser: 999
      runAsGroup: 999

# Redis cache configuration  
redis:
  enabled: true
  auth:
    enabled: false
    
  architecture: standalone
  
  master:
    persistence:
      enabled: false
      
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
        
    configuration: |
      maxmemory 512mb
      maxmemory-policy allkeys-lru
      timeout 300
      tcp-keepalive 300
      save 900 1
      save 300 10
      save 60 10000
      
    securityContext:
      enabled: true
      runAsUser: 999

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  
  tls:
    enabled: true
    secretName: "scholarship-tls"
    
  hosts:
    - host: scholarship.edu.tw
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: api.scholarship.edu.tw
      paths:
        - path: /api/v1
          pathType: Prefix
          service: backend
        - path: /health
          pathType: Exact
          service: backend
        - path: /ready
          pathType: Exact
          service: backend
          
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"

# SSL Certificate configuration
certManager:
  enabled: true
  clusterIssuer:
    name: letsencrypt-prod
    email: admin@scholarship.edu.tw
    server: https://acme-v02.api.letsencrypt.org/directory

# Network Policy configuration
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
    
# Secrets configuration
secrets:
  create: true
  name: scholarship-secrets
  data:
    # Base64 encoded values - will be generated or provided during deployment
    databaseUrl: ""
    jwtSecret: ""
    postgresUser: ""
    postgresPassword: ""

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Monitoring configuration
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"
  
# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Pod security policy
podSecurityPolicy:
  enabled: false

# Priority class
priorityClassName: ""

# Environment-specific overrides
environments:
  development:
    backend:
      replicaCount: 2
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
    frontend:
      replicaCount: 2
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
    postgresql:
      primary:
        persistence:
          size: 10Gi
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
    redis:
      master:
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
      tls:
        enabled: false
        
  staging:
    backend:
      replicaCount: 2
    frontend:
      replicaCount: 2
    postgresql:
      primary:
        persistence:
          size: 50Gi
          
  production:
    # Production values are the defaults above 