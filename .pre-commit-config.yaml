# Pre-commit hooks for code quality and testing
# Install: pip install pre-commit && pre-commit install

repos:
  # Python hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: detect-private-key
      - id: debug-statements
        language_version: python3.11

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.11
        args: ['--line-length=100']
        files: ^backend/

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length', '100']
        files: ^backend/

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: ['--max-line-length=100', '--extend-ignore=E203,W503']
        files: ^backend/
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        args: ['--config-file=backend/mypy.ini']
        files: ^backend/
        additional_dependencies:
          - types-requests
          - types-redis
          - sqlalchemy[mypy]

  # Python security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'backend/app', '-ll']
        files: ^backend/

  # JavaScript/TypeScript hooks
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.54.0
    hooks:
      - id: eslint
        files: ^frontend/.*\.[jt]sx?$
        types: [file]
        additional_dependencies:
          - eslint
          - eslint-config-next
          - '@typescript-eslint/eslint-plugin'
          - '@typescript-eslint/parser'

  # Prettier formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: ^frontend/
        types_or: [javascript, jsx, ts, tsx, css, scss, json, markdown]

  # Shell script checks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-x']

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: ['-c', '.yamllint.yml']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: ['--fix']

  # Secret detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']

  # Local hooks for testing
  - repo: local
    hooks:
      # Run quick backend tests
      - id: pytest-quick
        name: Quick Python Tests
        entry: bash -c 'cd backend && python -m pytest -m "smoke" -v --tb=short'
        language: system
        types: [python]
        pass_filenames: false
        files: ^backend/

      # Check Python test coverage
      - id: pytest-coverage
        name: Python Test Coverage
        entry: bash -c 'cd backend && python -m pytest --cov=app --cov-fail-under=90 --cov-report=term-missing:skip-covered -x'
        language: system
        types: [python]
        pass_filenames: false
        files: ^backend/
        stages: [push]

      # Run frontend linting
      - id: npm-lint
        name: Frontend Linting
        entry: bash -c 'cd frontend && npm run lint'
        language: system
        types_or: [javascript, jsx, ts, tsx]
        pass_filenames: false
        files: ^frontend/

      # Run frontend tests
      - id: npm-test
        name: Frontend Tests
        entry: bash -c 'cd frontend && npm test -- --watchAll=false --passWithNoTests'
        language: system
        types_or: [javascript, jsx, ts, tsx]
        pass_filenames: false
        files: ^frontend/
        stages: [push]

# Configuration for specific hooks
default_language_version:
  python: python3.11
  node: 22.11.0

# Stages configuration
default_stages: [commit]

# Files to exclude
exclude: |
  (?x)^(
    .*\.min\.js|
    .*\.min\.css|
    frontend/public/|
    frontend/.next/|
    backend/alembic/versions/|
    .*\.pyc|
    .*/__pycache__/|
    .*\.pytest_cache/|
    .*\.coverage|
    .*\.egg-info/|
    node_modules/|
    venv/|
    .git/|
    build/|
    dist/
  )$