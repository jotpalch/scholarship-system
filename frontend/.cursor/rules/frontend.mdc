# Frontend Cursor Rules - Scholarship System

## Technology Stack
- **Framework**: Next.js 15, React 18, TypeScript
- **Styling**: Tailwind CSS, shadcn/ui
- **Testing**: Jest (unit tests), Playwright (E2E)
- **Data Fetching**: SWR or similar
- **Forms**: React Hook Form + Zod validation

## Directory Structure (frontend/)
- `app/` - Next.js App Router pages
- `components/` - React components
- `components/ui/` - shadcn/ui base components
- `lib/` - Utility functions and configuration
- `hooks/` - Custom React hooks
- `types/` - TypeScript type definitions

## Naming Conventions

### Files and Directories
- File names: **kebab-case** (e.g., `student-portal.tsx`)
- Directory names: **lowercase** or **kebab-case**

### Code
- Component names: `PascalCase` (e.g., `StudentPortal`, `ApplicationForm`)
- Variables and functions: `camelCase` (e.g., `handleSubmit`, `applicationData`)
- Types and interfaces: `PascalCase` (e.g., `StudentType`, `ApplicationProps`)
- Constants: `UPPER_SNAKE_CASE` (e.g., `API_BASE_URL`)

## Component Standards

### Component Structure
```typescript
interface ComponentProps {
  userId: string;
  applicationData?: ApplicationData;
}

export function ComponentName({ userId, applicationData }: ComponentProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleFormSubmit = async (formData: FormData) => {
    // Handle form submission
  };
  
  return (
    <div className="p-6">
      {/* Component content */}
    </div>
  );
}
```

### UI Components
- Use shadcn/ui components as base
- Apply Tailwind CSS for styling
- Ensure responsive design (mobile-first)
- Implement dark/light theme support

## Form Handling

### Validation
```typescript
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const formSchema = z.object({
  studentId: z.string().min(1, "Student ID is required"),
  gpa: z.number().min(0).max(4.0, "GPA must be between 0 and 4.0"),
});

type FormData = z.infer<typeof formSchema>;

export function ApplicationForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });
  
  const onSubmit = async (data: FormData) => {
    // Handle submission
  };
}
```

## API Integration

### API Calls
```typescript
const submitApplication = async (data: ApplicationData) => {
  const response = await fetch('/api/v1/submitApplication', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });
  
  if (!response.ok) {
    throw new Error('Failed to submit application');
  }
  
  return response.json();
};
```

### Error Handling
```typescript
interface ErrorState {
  hasError: boolean;
  message: string;
  code?: number;
}

const handleApiError = (error: unknown) => {
  if (error instanceof Error) {
    return { hasError: true, message: error.message };
  }
  return { hasError: true, message: 'An unexpected error occurred' };
};
```

## Testing Standards

### Unit Tests (Jest + Testing Library)
```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { StudentPortal } from './student-portal';

describe('StudentPortal Component', () => {
  it('should render application form correctly', () => {
    render(<StudentPortal userId="123" />);
    expect(screen.getByRole('form')).toBeInTheDocument();
  });
  
  it('should handle form submission', async () => {
    render(<StudentPortal userId="123" />);
    const submitButton = screen.getByRole('button', { name: /submit/i });
    fireEvent.click(submitButton);
    // Test form submission logic
  });
});
```

### E2E Tests (Playwright)
- Place in `e2e/` directory
- Test complete user flows
- Include accessibility tests

## Performance Guidelines

### Optimization
- Use Next.js Image component for images
- Implement component lazy loading
- Optimize bundle size with dynamic imports
- Use SWR for efficient data fetching

### Code Splitting
```typescript
import dynamic from 'next/dynamic';

const HeavyComponent = dynamic(() => import('./heavy-component'), {
  loading: () => <div>Loading...</div>,
});
```

## Internationalization

### Multi-language Support
- Support Chinese-English switching
- Only Student pages need i18n support
- Use Next.js internationalization features

```typescript
import { useTranslation } from 'next-i18next';

export function StudentPortal() {
  const { t } = useTranslation('common');
  
  return (
    <h1>{t('welcome_message')}</h1>
  );
}
```

## Accessibility

### A11y Requirements
- Use semantic HTML elements
- Implement proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios
- Test with screen readers

## Code Quality

### ESLint/Prettier Configuration
- Follow project ESLint rules
- Use Prettier for code formatting
- Configure import sorting
- Enable TypeScript strict mode

### Documentation
- Use JSDoc comments for components
- Include props types and usage examples
- Document complex logic and algorithms

## Common Patterns

### Custom Hooks
```typescript
export function useApplicationSubmission() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const submitApplication = async (data: ApplicationData) => {
    setIsSubmitting(true);
    setError(null);
    
    try {
      await submitApplicationApi(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Submission failed');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return { submitApplication, isSubmitting, error };
}
```

### State Management
- Use React's built-in state for local state
- Consider Zustand for global state if needed
- Leverage SWR for server state

## Special Requirements

### File Uploads
- Implement type and size restrictions
- Add progress indicators
- Handle upload failures gracefully

### GPA Validation
- Implement client-side validation
- Provide clear error messages
- Support different GPA scales

### Mobile Responsiveness
- Mobile-first design approach
- Touch-friendly interface
- Optimized for small screens 